module reference_model (clk,
            reset,
            rcc_clk,
            address,
            din);
           //output digit_clk,
           //output dout,
           //output dout_flag,
           
	   //output scan_out0, output scan_out1
        $display ( address);
	logic [3:0] address;
	logic [15:0] r697,r770,r852,r941,r1209,r1336,r1477,r1633,low_mag,high_mag;
	logic [2:0] low, high ;
	logic [15:0] din;
	//logic test_mode, scan_in0, scan_in1, scan_en;
	logic nodigit;
	logic [7:0] dout;
	logic [7:0] j,var1;
	//need to delcare output logic 
	
	
	//parameter key_1     = {2'b00, 2'b00} ;
	//parameter key_2     = {2'b00, 2'b01} ;
	//parameter key_3     = {2'b00, 2'b10} ;
	//parameter key_a     = {2'b00, 2'b11} ;
	//parameter key_4     = {2'b01, 2'b00} ;
	//parameter key_5     = {2'b01, 2'b01} ;
	//parameter key_6     = {2'b01, 2'b10} ;
	//parameter key_b     = {2'b01, 2'b11} ;
	//parameter key_7     = {2'b10, 2'b00} ;
	//parameter key_8     = {2'b10, 2'b01} ;
	//parameter key_9     = {2'b10, 2'b10} ;
	//parameter key_c     = {2'b10, 2'b11} ;
	//parameter key_star  = {2'b11, 2'b00} ;
	//parameter key_0     = {2'b11, 2'b01} ;
	//parameter key_pound = {2'b11, 2'b10} ;
	//parameter key_d     = {2'b11, 2'b11} ;

	//scoreboardt sb;

 	//function  new (virtual intf_cnt intf,scoreboardt sb);
         //    this.intf = intf;
         //    this.sb = sb;
             //cov = new();
        //endfunction

	if (reset)
	    	begin
		assign sb.digit_clk = 0 ;
		assign sb.dout_flag 	= 1 ;
		assign clear_flag 	= 0 ;
		assign seen_quiet 	= 1 ;
		assign out_p1 		= 0 ;
		assign out_p2 		= 8'hff ;
		assign low		= 0 ;
		assign high 		= 0 ;
		assign low_mag		= 0 ;
		assign high_mag	= 0 ;
	       // opa		= 0 ;  
	       // opb		= 0 ;
	       // opc		= 0 ;
	       // opd		= 0 ;
		//start_gt	= 0 ;
		//clear_gt	= 0 ;
		//start_ct	= 0 ;
		//clear_ct	= 0 ;
		assign dout 		= 8'hff ;
		int seen_quiet = 0;
		assign nodigit = 1'b0;
	    	end

	if (address == 4'b0000)
		assign r697 = din;
	else if (address == 4'b0001)
		assign r770 = din;
	else if (address == 4'b0010)
		assign r852 = din;
	else if (address == 4'b0011)
		assign r941 = din;
	else if (address == 4'b0100)
		assign r1209 = din;
	else if (address == 4'b0101)
		assign r1336 = din;
	else if (address == 4'b0110)
		assign r1477 = din;
	else if (address == 4'b0111)
		assign r1633 = din;
	//else
	//	begin
	//	end

	if ( r697 - r770 > 0 && r697 - r852 > 0  && r697 -r941 > 0)
	begin
		assign low = { 1'b0, 2'b00};
		assign low_mag = r697;
	end
	
	if ( r770 - r697 > 0 && r770 - r852 >0 && r770 - r941 > 0 )
	begin
		assign low = { 1'b0, 2'b01};
		assign low_mag = r770;
	end

	if ( r852 - r697 > 0 && r852 - r770 > 0 && r852 - r941 > 0)
	begin
		assign low = { 1'b0, 2'b10};
		assign low_mag = r852;
	end
	
	if ( r941 - r697 > 0 && r941 - r770 > 0 && r941 - r852 > 0 )
	begin
		assign low = { 1'b0, 2'b11};
		assign low_mag = r941;
	end
	else
	begin

	end
	if ( r1209 - r1336 > 0 && r1209 - r1477 > 0 && r1209 - r1633 > 0)
	begin
		assign high = { 1'b0, 2'b00};
		assign high_mag = r1209;
	end 
	
	if ( r1336 - r1209 > 0 && r1336 - r1477 > 0 && r1336 - r1633 > 0 )
	begin	
		assign high = { 1'b0, 2'b01};
		assign high_mag = r1336;
	end
	
	if ( r1477 - r1209 > 0 && r1477 - r1336 > 0 && r1477 - r1633 > 0 )
	begin	
		assign high = { 1'b0, 2'b10};
		assign high_mag = r1477;
	end
	
	if ( r1633 - r1209 > 0 && r1633 - r1336 > 0 && r1633 - r1477 > 0)
	begin
		assign high = { 1'b0,2'b11};
		assign high_mag = r1633;
	end
	//else
	//begin
	//end
	// check starts here
	if ( !low[2] && !high[2])
	begin
		int opa = low_mag;
		int opb = high_mag;
		int cmpf = opa - opb;
		if (cmpf[16])
		begin
			assign cmpf = opa - {2'b0,opb[15:2]};
			assign cmpr = opb - opa;
		end	
		else
		begin	
			assign cmpf = opb - {2'b0,opa[15:2]};	
			assign cmpr = opa - opb;
		end
		int okay = (~cmpf[16]) && (~cmpr[16]); 
	end

	
	
	if ( okay)
	begin
		if ( {low[1:0], high[1:0]} == 4'b0000)
			assign out_p1 = "1";
		else if ( {low[1:0], high[1:0]} == {2'b00, 2'b01} )
			assign out_p1 = "2";
		else if  ( {low[1:0], high[1:0]} == {2'b00, 2'b10} )
			assign out_p1 = "3";
		else if  ( {low[1:0], high[1:0]} == {2'b00, 2'b11} )
			assign out_p1 = "a";
		else if  ( {low[1:0], high[1:0]} == {2'b01, 2'b00} )
			assign out_p1 = "4";
		else if  ( {low[1:0], high[1:0]} == {2'b01, 2'b01} )
			assign out_p1 = "5";
		else if  ( {low[1:0], high[1:0]} == {2'b01, 2'b10} )
			assign out_p1 = "6";
		else if  ( {low[1:0], high[1:0]} == {2'b01, 2'b11} )
			assign out_p1 = "b";
		else if  ( {low[1:0], high[1:0]} == {2'b10, 2'b00} )
			assign out_p1 = "7";
		else if  ( {low[1:0], high[1:0]} == {2'b10, 2'b01} )
			assign out_p1 = "8";
		else if  ( {low[1:0], high[1:0]} == {2'b10, 2'b10} )
			assign out_p1 = "9";
		else if  ( {low[1:0], high[1:0]} == {2'b10, 2'b11} )
			assign out_p1 = "c";
		else if  ( {low[1:0], high[1:0]} == {2'b11, 2'b00} )
			assign out_p1 = "*";
		else if  ( {low[1:0], high[1:0]} == {2'b11, 2'b01} )
			assign out_p1 = "0";
		else if  ( {low[1:0], high[1:0]} == {2'b11, 2'b10} )
			assign out_p1 = "#";
		else if  ( {low[1:0], high[1:0]} == {2'b11, 2'b11} )
			assign out_p1 = "d";
		else
			assign out_p1 = nodigit;
	end
	
	
	//return dout;
	//array1[counter]= out_p2;
	
	//int j = 0;
	//j = array1[counter-1];
	
	//if (var1 == out_p1)
	//begin 
	//	if ( out_p1==  nodigit)
	//	begin 
	//		int seen_quiet = 1;
	//	end
	//	else
	//		if(seen_quiet)
	//		begin
	//			assign seen_quiet = 0;
	//			assign dout = {1'b0,out_p1[6:0]};
				//assign sb.digit_clk = 1;   //reset in drive before it drives new stimulus
				//assign sb.dout_flag = ~sb.dout_flag;
				//assign sb.store = dout;
	//			var1 = out_p1;
	//			return dout,var1;
	//		end	
	// end
	
	
endmodule
